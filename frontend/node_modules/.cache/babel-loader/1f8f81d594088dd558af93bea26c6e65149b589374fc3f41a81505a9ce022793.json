{"ast":null,"code":"// src/services/ApiService.js\nimport axios from 'axios';\n\n// Konfigurasi instance Axios dengan URL dasar ke API backend\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\n\n// Anda bisa menambahkan interceptor untuk menyisipkan token secara otomatis\n// apiClient.interceptors.request.use(config => {\n//   const userId = localStorage.getItem('user_id'); // Ambil ID user dari local storage\n//   if (userId) {\n//     config.headers['x-user-id'] = userId;\n//   }\n//   return config;\n// });\n\nexport default {\n  // === Articles ===\n  getArticles() {\n    return apiClient.get('/articles');\n  },\n  getArticle(id) {\n    return apiClient.get(`/articles/${id}`);\n  },\n  // Untuk rute yang butuh otentikasi, kita bisa tambahkan header secara manual\n  // Di aplikasi nyata, ini akan ditangani oleh interceptor di atas\n  createArticle(articleData, userId) {\n    return apiClient.post('/articles', articleData, {\n      headers: {\n        'x-user-id': userId\n      }\n    });\n  },\n  // === Categories ===\n  getCategories() {\n    return apiClient.get('/categories');\n  },\n  // === Forum (Tanya Bidan) - BARU ===\n  getAllQuestions() {\n    return apiClient.get('/tanya-bidan');\n  },\n  getQuestionById(id) {\n    return apiClient.get(`/tanya-bidan/${id}`);\n  },\n  createQuestion(questionData) {\n    // Di aplikasi nyata, user_id akan diambil dari token\n    return apiClient.post('/tanya-bidan', questionData);\n  },\n  createAnswer(questionId, answerData) {\n    return apiClient.post(`/tanya-bidan/${questionId}/answers`, answerData);\n  },\n  // === Consultations ===\n  submitConsultation(consultationData) {\n    return apiClient.post('/consultations', consultationData);\n  },\n  // === Reservations ===\n  submitReservation(reservationData) {\n    return apiClient.post('/reservations', reservationData);\n  },\n  // === Testimonials ===\n  getTestimonials() {\n    return apiClient.get('/testimonials');\n  }\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","getArticles","get","getArticle","id","createArticle","articleData","userId","post","headers","getCategories","getAllQuestions","getQuestionById","createQuestion","questionData","createAnswer","questionId","answerData","submitConsultation","consultationData","submitReservation","reservationData","getTestimonials"],"sources":["E:/ibuhamil/frontend/src/services/ApiService.js"],"sourcesContent":["// src/services/ApiService.js\r\nimport axios from 'axios';\r\n\r\n// Konfigurasi instance Axios dengan URL dasar ke API backend\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n});\r\n\r\n// Anda bisa menambahkan interceptor untuk menyisipkan token secara otomatis\r\n// apiClient.interceptors.request.use(config => {\r\n//   const userId = localStorage.getItem('user_id'); // Ambil ID user dari local storage\r\n//   if (userId) {\r\n//     config.headers['x-user-id'] = userId;\r\n//   }\r\n//   return config;\r\n// });\r\n\r\nexport default {\r\n  // === Articles ===\r\n  getArticles() {\r\n    return apiClient.get('/articles');\r\n  },\r\n  getArticle(id) {\r\n    return apiClient.get(`/articles/${id}`);\r\n  },\r\n  // Untuk rute yang butuh otentikasi, kita bisa tambahkan header secara manual\r\n  // Di aplikasi nyata, ini akan ditangani oleh interceptor di atas\r\n  createArticle(articleData, userId) {\r\n    return apiClient.post('/articles', articleData, {\r\n      headers: { 'x-user-id': userId }\r\n    });\r\n  },\r\n\r\n  // === Categories ===\r\n  getCategories() {\r\n    return apiClient.get('/categories');\r\n  },\r\n\r\n    // === Forum (Tanya Bidan) - BARU ===\r\n  getAllQuestions() {\r\n    return apiClient.get('/tanya-bidan');\r\n  },\r\n  getQuestionById(id) {\r\n    return apiClient.get(`/tanya-bidan/${id}`);\r\n  },\r\n  createQuestion(questionData) {\r\n    // Di aplikasi nyata, user_id akan diambil dari token\r\n    return apiClient.post('/tanya-bidan', questionData);\r\n  },\r\n  createAnswer(questionId, answerData) {\r\n    return apiClient.post(`/tanya-bidan/${questionId}/answers`, answerData);\r\n  },\r\n\r\n\r\n  // === Consultations ===\r\n  submitConsultation(consultationData) {\r\n    return apiClient.post('/consultations', consultationData);\r\n  },\r\n\r\n  // === Reservations ===\r\n  submitReservation(reservationData) {\r\n    return apiClient.post('/reservations', reservationData);\r\n  },\r\n  \r\n  // === Testimonials ===\r\n  getTestimonials() {\r\n    return apiClient.get('/testimonials');\r\n  },\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe;EACb;EACAC,WAAWA,CAAA,EAAG;IACZ,OAAOH,SAAS,CAACI,GAAG,CAAC,WAAW,CAAC;EACnC,CAAC;EACDC,UAAUA,CAACC,EAAE,EAAE;IACb,OAAON,SAAS,CAACI,GAAG,CAAC,aAAaE,EAAE,EAAE,CAAC;EACzC,CAAC;EACD;EACA;EACAC,aAAaA,CAACC,WAAW,EAAEC,MAAM,EAAE;IACjC,OAAOT,SAAS,CAACU,IAAI,CAAC,WAAW,EAAEF,WAAW,EAAE;MAC9CG,OAAO,EAAE;QAAE,WAAW,EAAEF;MAAO;IACjC,CAAC,CAAC;EACJ,CAAC;EAED;EACAG,aAAaA,CAAA,EAAG;IACd,OAAOZ,SAAS,CAACI,GAAG,CAAC,aAAa,CAAC;EACrC,CAAC;EAEC;EACFS,eAAeA,CAAA,EAAG;IAChB,OAAOb,SAAS,CAACI,GAAG,CAAC,cAAc,CAAC;EACtC,CAAC;EACDU,eAAeA,CAACR,EAAE,EAAE;IAClB,OAAON,SAAS,CAACI,GAAG,CAAC,gBAAgBE,EAAE,EAAE,CAAC;EAC5C,CAAC;EACDS,cAAcA,CAACC,YAAY,EAAE;IAC3B;IACA,OAAOhB,SAAS,CAACU,IAAI,CAAC,cAAc,EAAEM,YAAY,CAAC;EACrD,CAAC;EACDC,YAAYA,CAACC,UAAU,EAAEC,UAAU,EAAE;IACnC,OAAOnB,SAAS,CAACU,IAAI,CAAC,gBAAgBQ,UAAU,UAAU,EAAEC,UAAU,CAAC;EACzE,CAAC;EAGD;EACAC,kBAAkBA,CAACC,gBAAgB,EAAE;IACnC,OAAOrB,SAAS,CAACU,IAAI,CAAC,gBAAgB,EAAEW,gBAAgB,CAAC;EAC3D,CAAC;EAED;EACAC,iBAAiBA,CAACC,eAAe,EAAE;IACjC,OAAOvB,SAAS,CAACU,IAAI,CAAC,eAAe,EAAEa,eAAe,CAAC;EACzD,CAAC;EAED;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAOxB,SAAS,CAACI,GAAG,CAAC,eAAe,CAAC;EACvC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}