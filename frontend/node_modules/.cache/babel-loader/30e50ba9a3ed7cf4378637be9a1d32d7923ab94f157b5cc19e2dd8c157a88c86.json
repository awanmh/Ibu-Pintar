{"ast":null,"code":"// src/services/ApiService.js\nimport axios from 'axios';\n\n// Konfigurasi instance Axios dengan URL dasar ke API backend\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  // Menambahkan header default jika diperlukan, misal untuk content type\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Anda bisa menambahkan interceptor untuk menyisipkan token secara otomatis\n// Penting: Di lingkungan produksi, token biasanya diambil dari sistem otentikasi (misalnya Vuex store, Pinia, atau JWT di Local Storage)\n// dan harus dikirim sebagai Bearer Token, bukan 'x-user-id'\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('authToken'); // Contoh: Ambil JWT token\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`; // Standar JWT\n  }\n  // Jika Anda tetap ingin 'x-user-id' (misalnya untuk development/spesifik), bisa ditambahkan juga\n  const userId = localStorage.getItem('user_id');\n  if (userId && !config.headers['x-user-id']) {\n    // Hindari duplikasi jika sudah diatur manual\n    config.headers['x-user-id'] = userId;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default {\n  // === Articles ===\n  getArticles() {\n    // Menggunakan endpoint '/articles'\n    return apiClient.get('/articles');\n  },\n  getArticle(slug) {\n    // Mengubah parameter dari 'id' menjadi 'slug' agar sesuai dengan router\n    // Menggunakan endpoint '/articles/:slug'\n    return apiClient.get(`/articles/${slug}`);\n  },\n  createArticle(articleData) {\n    // userId bisa diambil dari interceptor atau konteks otentikasi\n    // Asumsi userId sudah disisipkan oleh interceptor request\n    return apiClient.post('/articles', articleData);\n  },\n  // Jika perlu update/delete:\n  // updateArticle(slug, articleData) {\n  //   return apiClient.put(`/articles/${slug}`, articleData);\n  // },\n  // deleteArticle(slug) {\n  //   return apiClient.delete(`/articles/${slug}`);\n  // },\n\n  // === Categories ===\n  getCategories() {\n    return apiClient.get('/categories');\n  },\n  // === Services / Treatments (Layanan) - BARU DITAMBAHKAN/BENAHI ===\n  getServices() {\n    // Asumsi endpoint untuk daftar semua layanan\n    return apiClient.get('/services'); // Atau '/layanan' sesuai API backend Anda\n  },\n  getService(slug) {\n    // Menggunakan 'slug' karena rute Anda menggunakan '/layanan/:slug'\n    // Asumsi endpoint untuk detail layanan\n    return apiClient.get(`/services/${slug}`); // Atau '/layanan/${slug}' sesuai API backend Anda\n  },\n  // Jika perlu menambahkan layanan baru\n  // createService(serviceData) {\n  //   return apiClient.post('/services', serviceData);\n  // },\n\n  // === Forum (Tanya Bidan) ===\n  getAllQuestions() {\n    return apiClient.get('/tanya-bidan');\n  },\n  getQuestionById(id) {\n    // Parameter tetap 'id' jika backend Anda menggunakan ID numerik untuk pertanyaan\n    return apiClient.get(`/tanya-bidan/${id}`);\n  },\n  createQuestion(questionData) {\n    // Asumsi userId (jika perlu otentikasi) sudah disisipkan oleh interceptor\n    return apiClient.post('/tanya-bidan', questionData);\n  },\n  createAnswer(questionId, answerData) {\n    // Asumsi userId (jika perlu otentikasi) sudah disisipkan oleh interceptor\n    return apiClient.post(`/tanya-bidan/${questionId}/answers`, answerData);\n  },\n  // === Consultations ===\n  submitConsultation(consultationData) {\n    return apiClient.post('/consultations', consultationData);\n  },\n  // getConsultations() { /* ... */ },\n\n  // === Reservations ===\n  submitReservation(reservationData) {\n    return apiClient.post('/reservations', reservationData);\n  },\n  // getReservations() { /* ... */ },\n\n  // === Testimonials ===\n  getTestimonials() {\n    return apiClient.get('/testimonials');\n  }\n\n  // createTestimonial(testimonialData) { /* ... */ },\n};","map":{"version":3,"names":["axios","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","userId","error","Promise","reject","getArticles","get","getArticle","slug","createArticle","articleData","post","getCategories","getServices","getService","getAllQuestions","getQuestionById","id","createQuestion","questionData","createAnswer","questionId","answerData","submitConsultation","consultationData","submitReservation","reservationData","getTestimonials"],"sources":["E:/ibuhamil/frontend/src/services/ApiService.js"],"sourcesContent":["// src/services/ApiService.js\r\nimport axios from 'axios';\r\n\r\n// Konfigurasi instance Axios dengan URL dasar ke API backend\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n  // Menambahkan header default jika diperlukan, misal untuk content type\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Anda bisa menambahkan interceptor untuk menyisipkan token secara otomatis\r\n// Penting: Di lingkungan produksi, token biasanya diambil dari sistem otentikasi (misalnya Vuex store, Pinia, atau JWT di Local Storage)\r\n// dan harus dikirim sebagai Bearer Token, bukan 'x-user-id'\r\napiClient.interceptors.request.use(config => {\r\n  const token = localStorage.getItem('authToken'); // Contoh: Ambil JWT token\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`; // Standar JWT\r\n  }\r\n  // Jika Anda tetap ingin 'x-user-id' (misalnya untuk development/spesifik), bisa ditambahkan juga\r\n  const userId = localStorage.getItem('user_id');\r\n  if (userId && !config.headers['x-user-id']) { // Hindari duplikasi jika sudah diatur manual\r\n    config.headers['x-user-id'] = userId;\r\n  }\r\n  return config;\r\n}, error => {\r\n  return Promise.reject(error);\r\n});\r\n\r\n\r\nexport default {\r\n  // === Articles ===\r\n  getArticles() {\r\n    // Menggunakan endpoint '/articles'\r\n    return apiClient.get('/articles');\r\n  },\r\n  getArticle(slug) { // Mengubah parameter dari 'id' menjadi 'slug' agar sesuai dengan router\r\n    // Menggunakan endpoint '/articles/:slug'\r\n    return apiClient.get(`/articles/${slug}`);\r\n  },\r\n  createArticle(articleData) { // userId bisa diambil dari interceptor atau konteks otentikasi\r\n    // Asumsi userId sudah disisipkan oleh interceptor request\r\n    return apiClient.post('/articles', articleData);\r\n  },\r\n  // Jika perlu update/delete:\r\n  // updateArticle(slug, articleData) {\r\n  //   return apiClient.put(`/articles/${slug}`, articleData);\r\n  // },\r\n  // deleteArticle(slug) {\r\n  //   return apiClient.delete(`/articles/${slug}`);\r\n  // },\r\n\r\n  // === Categories ===\r\n  getCategories() {\r\n    return apiClient.get('/categories');\r\n  },\r\n\r\n  // === Services / Treatments (Layanan) - BARU DITAMBAHKAN/BENAHI ===\r\n  getServices() {\r\n    // Asumsi endpoint untuk daftar semua layanan\r\n    return apiClient.get('/services'); // Atau '/layanan' sesuai API backend Anda\r\n  },\r\n  getService(slug) { // Menggunakan 'slug' karena rute Anda menggunakan '/layanan/:slug'\r\n    // Asumsi endpoint untuk detail layanan\r\n    return apiClient.get(`/services/${slug}`); // Atau '/layanan/${slug}' sesuai API backend Anda\r\n  },\r\n  // Jika perlu menambahkan layanan baru\r\n  // createService(serviceData) {\r\n  //   return apiClient.post('/services', serviceData);\r\n  // },\r\n\r\n\r\n  // === Forum (Tanya Bidan) ===\r\n  getAllQuestions() {\r\n    return apiClient.get('/tanya-bidan');\r\n  },\r\n  getQuestionById(id) { // Parameter tetap 'id' jika backend Anda menggunakan ID numerik untuk pertanyaan\r\n    return apiClient.get(`/tanya-bidan/${id}`);\r\n  },\r\n  createQuestion(questionData) {\r\n    // Asumsi userId (jika perlu otentikasi) sudah disisipkan oleh interceptor\r\n    return apiClient.post('/tanya-bidan', questionData);\r\n  },\r\n  createAnswer(questionId, answerData) {\r\n    // Asumsi userId (jika perlu otentikasi) sudah disisipkan oleh interceptor\r\n    return apiClient.post(`/tanya-bidan/${questionId}/answers`, answerData);\r\n  },\r\n\r\n  // === Consultations ===\r\n  submitConsultation(consultationData) {\r\n    return apiClient.post('/consultations', consultationData);\r\n  },\r\n  // getConsultations() { /* ... */ },\r\n\r\n  // === Reservations ===\r\n  submitReservation(reservationData) {\r\n    return apiClient.post('/reservations', reservationData);\r\n  },\r\n  // getReservations() { /* ... */ },\r\n\r\n  // === Testimonials ===\r\n  getTestimonials() {\r\n    return apiClient.get('/testimonials');\r\n  },\r\n  \r\n  // createTestimonial(testimonialData) { /* ... */ },\r\n};"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpC;EACAC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAACC,MAAM,IAAI;EAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE,CAAC,CAAC;EACpD;EACA;EACA,MAAMI,MAAM,GAAGH,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;EAC9C,IAAIE,MAAM,IAAI,CAACL,MAAM,CAACJ,OAAO,CAAC,WAAW,CAAC,EAAE;IAAE;IAC5CI,MAAM,CAACJ,OAAO,CAAC,WAAW,CAAC,GAAGS,MAAM;EACtC;EACA,OAAOL,MAAM;AACf,CAAC,EAAEM,KAAK,IAAI;EACV,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CAAC,CAAC;AAGF,eAAe;EACb;EACAG,WAAWA,CAAA,EAAG;IACZ;IACA,OAAOhB,SAAS,CAACiB,GAAG,CAAC,WAAW,CAAC;EACnC,CAAC;EACDC,UAAUA,CAACC,IAAI,EAAE;IAAE;IACjB;IACA,OAAOnB,SAAS,CAACiB,GAAG,CAAC,aAAaE,IAAI,EAAE,CAAC;EAC3C,CAAC;EACDC,aAAaA,CAACC,WAAW,EAAE;IAAE;IAC3B;IACA,OAAOrB,SAAS,CAACsB,IAAI,CAAC,WAAW,EAAED,WAAW,CAAC;EACjD,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACAE,aAAaA,CAAA,EAAG;IACd,OAAOvB,SAAS,CAACiB,GAAG,CAAC,aAAa,CAAC;EACrC,CAAC;EAED;EACAO,WAAWA,CAAA,EAAG;IACZ;IACA,OAAOxB,SAAS,CAACiB,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;EACrC,CAAC;EACDQ,UAAUA,CAACN,IAAI,EAAE;IAAE;IACjB;IACA,OAAOnB,SAAS,CAACiB,GAAG,CAAC,aAAaE,IAAI,EAAE,CAAC,CAAC,CAAC;EAC7C,CAAC;EACD;EACA;EACA;EACA;;EAGA;EACAO,eAAeA,CAAA,EAAG;IAChB,OAAO1B,SAAS,CAACiB,GAAG,CAAC,cAAc,CAAC;EACtC,CAAC;EACDU,eAAeA,CAACC,EAAE,EAAE;IAAE;IACpB,OAAO5B,SAAS,CAACiB,GAAG,CAAC,gBAAgBW,EAAE,EAAE,CAAC;EAC5C,CAAC;EACDC,cAAcA,CAACC,YAAY,EAAE;IAC3B;IACA,OAAO9B,SAAS,CAACsB,IAAI,CAAC,cAAc,EAAEQ,YAAY,CAAC;EACrD,CAAC;EACDC,YAAYA,CAACC,UAAU,EAAEC,UAAU,EAAE;IACnC;IACA,OAAOjC,SAAS,CAACsB,IAAI,CAAC,gBAAgBU,UAAU,UAAU,EAAEC,UAAU,CAAC;EACzE,CAAC;EAED;EACAC,kBAAkBA,CAACC,gBAAgB,EAAE;IACnC,OAAOnC,SAAS,CAACsB,IAAI,CAAC,gBAAgB,EAAEa,gBAAgB,CAAC;EAC3D,CAAC;EACD;;EAEA;EACAC,iBAAiBA,CAACC,eAAe,EAAE;IACjC,OAAOrC,SAAS,CAACsB,IAAI,CAAC,eAAe,EAAEe,eAAe,CAAC;EACzD,CAAC;EACD;;EAEA;EACAC,eAAeA,CAAA,EAAG;IAChB,OAAOtC,SAAS,CAACiB,GAAG,CAAC,eAAe,CAAC;EACvC;;EAEA;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}