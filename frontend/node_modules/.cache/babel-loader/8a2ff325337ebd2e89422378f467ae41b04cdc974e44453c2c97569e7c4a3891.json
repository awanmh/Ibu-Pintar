{"ast":null,"code":"// src/store/modules/auth.js\nimport ApiService from '@/services/ApiService';\n\n// Ambil user dan token dari localStorage jika ada\nconst user = JSON.parse(localStorage.getItem('user'));\nconst token = localStorage.getItem('token');\nconst state = {\n  user: user ? user : null,\n  token: token ? token : null,\n  status: 'idle' // idle, loading, success, error\n};\nconst getters = {\n  isLoggedIn: state => !!state.token,\n  isAdmin: state => state.user && state.user.role === 'admin',\n  authStatus: state => state.status,\n  currentUser: state => state.user\n};\nconst actions = {\n  async register({\n    commit\n  }, userData) {\n    commit('SET_STATUS', 'loading');\n    try {\n      const response = await ApiService.register(userData);\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n      commit('AUTH_SUCCESS', {\n        user,\n        token\n      });\n      return response;\n    } catch (error) {\n      commit('AUTH_ERROR');\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      throw error;\n    }\n  },\n  async login({\n    commit\n  }, userData) {\n    commit('SET_STATUS', 'loading');\n    try {\n      const response = await ApiService.login(userData);\n      const {\n        user,\n        token\n      } = response.data;\n      localStorage.setItem('user', JSON.stringify(user));\n      localStorage.setItem('token', token);\n      commit('AUTH_SUCCESS', {\n        user,\n        token\n      });\n      return response;\n    } catch (error) {\n      commit('AUTH_ERROR');\n      localStorage.removeItem('user');\n      localStorage.removeItem('token');\n      throw error;\n    }\n  },\n  logout({\n    commit\n  }) {\n    commit('LOGOUT');\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  }\n};\nconst mutations = {\n  SET_STATUS(state, status) {\n    state.status = status;\n  },\n  AUTH_SUCCESS(state, {\n    user,\n    token\n  }) {\n    state.status = 'success';\n    state.user = user;\n    state.token = token;\n  },\n  AUTH_ERROR(state) {\n    state.status = 'error';\n    state.user = null;\n    state.token = null;\n  },\n  LOGOUT(state) {\n    state.status = 'idle';\n    state.user = null;\n    state.token = null;\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  actions,\n  mutations\n};","map":{"version":3,"names":["ApiService","user","JSON","parse","localStorage","getItem","token","state","status","getters","isLoggedIn","isAdmin","role","authStatus","currentUser","actions","register","commit","userData","response","data","setItem","stringify","error","removeItem","login","logout","mutations","SET_STATUS","AUTH_SUCCESS","AUTH_ERROR","LOGOUT","namespaced"],"sources":["E:/ibuPintar/frontend/src/store/modules/auth.js"],"sourcesContent":["// src/store/modules/auth.js\r\nimport ApiService from '@/services/ApiService';\r\n\r\n// Ambil user dan token dari localStorage jika ada\r\nconst user = JSON.parse(localStorage.getItem('user'));\r\nconst token = localStorage.getItem('token');\r\n\r\nconst state = {\r\n  user: user ? user : null,\r\n  token: token ? token : null,\r\n  status: 'idle', // idle, loading, success, error\r\n};\r\n\r\nconst getters = {\r\n  isLoggedIn: state => !!state.token,\r\n  isAdmin: state => state.user && state.user.role === 'admin',\r\n  authStatus: state => state.status,\r\n  currentUser: state => state.user,\r\n};\r\n\r\nconst actions = {\r\n  async register({ commit }, userData) {\r\n    commit('SET_STATUS', 'loading');\r\n    try {\r\n      const response = await ApiService.register(userData);\r\n      const { user, token } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      commit('AUTH_SUCCESS', { user, token });\r\n      return response;\r\n    } catch (error) {\r\n      commit('AUTH_ERROR');\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n      throw error;\r\n    }\r\n  },\r\n  async login({ commit }, userData) {\r\n    commit('SET_STATUS', 'loading');\r\n    try {\r\n      const response = await ApiService.login(userData);\r\n      const { user, token } = response.data;\r\n      localStorage.setItem('user', JSON.stringify(user));\r\n      localStorage.setItem('token', token);\r\n      commit('AUTH_SUCCESS', { user, token });\r\n      return response;\r\n    } catch (error) {\r\n      commit('AUTH_ERROR');\r\n      localStorage.removeItem('user');\r\n      localStorage.removeItem('token');\r\n      throw error;\r\n    }\r\n  },\r\n  logout({ commit }) {\r\n    commit('LOGOUT');\r\n    localStorage.removeItem('user');\r\n    localStorage.removeItem('token');\r\n  },\r\n};\r\n\r\nconst mutations = {\r\n  SET_STATUS(state, status) {\r\n    state.status = status;\r\n  },\r\n  AUTH_SUCCESS(state, { user, token }) {\r\n    state.status = 'success';\r\n    state.user = user;\r\n    state.token = token;\r\n  },\r\n  AUTH_ERROR(state) {\r\n    state.status = 'error';\r\n    state.user = null;\r\n    state.token = null;\r\n  },\r\n  LOGOUT(state) {\r\n    state.status = 'idle';\r\n    state.user = null;\r\n    state.token = null;\r\n  },\r\n};\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state,\r\n  getters,\r\n  actions,\r\n  mutations,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}