{"ast":null,"code":"import { ref, onMounted, computed } from 'vue';\nimport { useRoute } from 'vue-router';\nimport ApiService from '@/services/ApiService';\nimport { formatDate } from '@/utils/formatDate';\nexport default {\n  __name: 'ArticleDetailView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const article = ref(null);\n    const loading = ref(true);\n    const error = ref(null);\n\n    // Ambil ID artikel dari parameter URL\n    const articleId = route.params.id;\n\n    // Computed property untuk memformat tanggal\n    const formattedDate = computed(() => {\n      return article.value ? formatDate(article.value.date_posted) : '';\n    });\n\n    // Computed property untuk memecah konten menjadi paragraf\n    const articleParagraphs = computed(() => {\n      // Memecah teks berdasarkan baris baru (newline)\n      return article.value ? article.value.content.split(/\\n\\s*\\n/).filter(p => p.trim() !== '') : [];\n    });\n\n    // Fungsi untuk mengambil data dari API\n    onMounted(async () => {\n      // Pastikan articleId ada sebelum memanggil API\n      if (!articleId) {\n        error.value = \"ID Artikel tidak valid.\";\n        loading.value = false;\n        return;\n      }\n      try {\n        const response = await ApiService.getArticle(articleId);\n        article.value = response.data;\n      } catch (err) {\n        // Tangani error dari API (misal: 404 Not Found)\n        console.error(\"Error fetching article:\", err);\n        error.value = \"Artikel tidak ditemukan atau terjadi kesalahan.\";\n      } finally {\n        // Apapun hasilnya, hentikan loading\n        loading.value = false;\n      }\n    });\n    const __returned__ = {\n      route,\n      article,\n      loading,\n      error,\n      articleId,\n      formattedDate,\n      articleParagraphs,\n      ref,\n      onMounted,\n      computed,\n      get useRoute() {\n        return useRoute;\n      },\n      get ApiService() {\n        return ApiService;\n      },\n      get formatDate() {\n        return formatDate;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","useRoute","ApiService","formatDate","route","article","loading","error","articleId","params","id","formattedDate","value","date_posted","articleParagraphs","content","split","filter","p","trim","response","getArticle","data","err","console"],"sources":["E:/ibuhamil/frontend/src/views/article/ArticleDetailView.vue"],"sourcesContent":["<template>\r\n  <div class=\"page-container\">\r\n    <!-- Tampilkan pesan Loading -->\r\n    <div v-if=\"loading\" class=\"state-message\">Memuat artikel...</div>\r\n    \r\n    <!-- Tampilkan pesan Error -->\r\n    <div v-if=\"error\" class=\"state-message error\">{{ error }}</div>\r\n    \r\n    <!-- Tampilkan konten jika artikel berhasil dimuat -->\r\n    <article v-if=\"article\">\r\n      <!-- Gambar Utama Artikel -->\r\n      <div class=\"article-image-header\">\r\n        <img :src=\"article.imageUrl\" :alt=\"article.title\">\r\n      </div>\r\n\r\n      <h1 class=\"article-title\">{{ article.title }}</h1>\r\n      <p class=\"article-meta\">\r\n        Oleh <strong>{{ article.author.name }}</strong> dalam kategori <strong>{{ article.category.name }}</strong>\r\n        <br>\r\n        Dipublikasikan pada {{ formattedDate }}\r\n      </p>\r\n      \r\n      <!-- Tampilkan konten per paragraf -->\r\n      <div class=\"article-content\">\r\n        <p v-for=\"(paragraph, index) in articleParagraphs\" :key=\"index\">{{ paragraph }}</p>\r\n      </div>\r\n      \r\n      <router-link to=\"/articles\" class=\"back-link\">‚Üê Kembali ke Semua Artikel</router-link>\r\n    </article>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport { useRoute } from 'vue-router';\r\nimport ApiService from '@/services/ApiService';\r\nimport { formatDate } from '@/utils/formatDate';\r\n\r\nconst route = useRoute();\r\nconst article = ref(null);\r\nconst loading = ref(true);\r\nconst error = ref(null);\r\n\r\n// Ambil ID artikel dari parameter URL\r\nconst articleId = route.params.id;\r\n\r\n// Computed property untuk memformat tanggal\r\nconst formattedDate = computed(() => {\r\n  return article.value ? formatDate(article.value.date_posted) : '';\r\n});\r\n\r\n// Computed property untuk memecah konten menjadi paragraf\r\nconst articleParagraphs = computed(() => {\r\n  // Memecah teks berdasarkan baris baru (newline)\r\n  return article.value ? article.value.content.split(/\\n\\s*\\n/).filter(p => p.trim() !== '') : [];\r\n});\r\n\r\n// Fungsi untuk mengambil data dari API\r\nonMounted(async () => {\r\n  // Pastikan articleId ada sebelum memanggil API\r\n  if (!articleId) {\r\n    error.value = \"ID Artikel tidak valid.\";\r\n    loading.value = false;\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await ApiService.getArticle(articleId);\r\n    article.value = response.data;\r\n  } catch (err) {\r\n    // Tangani error dari API (misal: 404 Not Found)\r\n    console.error(\"Error fetching article:\", err);\r\n    error.value = \"Artikel tidak ditemukan atau terjadi kesalahan.\";\r\n  } finally {\r\n    // Apapun hasilnya, hentikan loading\r\n    loading.value = false;\r\n  }\r\n});\r\n</script>\r\n\r\n<style scoped>\r\n.page-container {\r\n  max-width: 800px;\r\n  margin: 40px auto;\r\n  padding: 0 20px;\r\n}\r\n.state-message {\r\n  text-align: center;\r\n  padding: 60px;\r\n  font-size: 1.2em;\r\n  color: #888;\r\n}\r\n.error {\r\n  color: #c53030;\r\n  background-color: #fff5f5;\r\n  border-radius: 8px;\r\n}\r\n.article-image-header {\r\n  width: 100%;\r\n  margin-bottom: 30px;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n.article-image-header img {\r\n  width: 100%;\r\n  aspect-ratio: 16 / 9;\r\n  object-fit: cover;\r\n}\r\n.article-title {\r\n  font-size: 2.5em;\r\n  margin-bottom: 10px;\r\n  line-height: 1.2;\r\n}\r\n.article-meta {\r\n  color: #666;\r\n  font-style: italic;\r\n  margin-bottom: 30px;\r\n  border-bottom: 1px solid #eee;\r\n  padding-bottom: 20px;\r\n}\r\n.article-content {\r\n  line-height: 1.8;\r\n  font-size: 1.1em;\r\n}\r\n.article-content p {\r\n  margin-bottom: 1.5em; /* Jarak antar paragraf */\r\n}\r\n.back-link {\r\n  display: inline-block;\r\n  margin-top: 40px;\r\n  text-decoration: none;\r\n  font-weight: bold;\r\n  color: #ff69b4;\r\n}\r\n</style>\r\n"],"mappings":"AAiCA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,SAASC,QAAQ,QAAQ,YAAY;AACrC,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,SAASC,UAAU,QAAQ,oBAAoB;;;;;;;IAE/C,MAAMC,KAAK,GAAGH,QAAQ,CAAC,CAAC;IACxB,MAAMI,OAAO,GAAGP,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMQ,OAAO,GAAGR,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMS,KAAK,GAAGT,GAAG,CAAC,IAAI,CAAC;;IAEvB;IACA,MAAMU,SAAS,GAAGJ,KAAK,CAACK,MAAM,CAACC,EAAE;;IAEjC;IACA,MAAMC,aAAa,GAAGX,QAAQ,CAAC,MAAM;MACnC,OAAOK,OAAO,CAACO,KAAK,GAAGT,UAAU,CAACE,OAAO,CAACO,KAAK,CAACC,WAAW,CAAC,GAAG,EAAE;IACnE,CAAC,CAAC;;IAEF;IACA,MAAMC,iBAAiB,GAAGd,QAAQ,CAAC,MAAM;MACvC;MACA,OAAOK,OAAO,CAACO,KAAK,GAAGP,OAAO,CAACO,KAAK,CAACG,OAAO,CAACC,KAAK,CAAC,SAAS,CAAC,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE;IACjG,CAAC,CAAC;;IAEF;IACApB,SAAS,CAAC,YAAY;MACpB;MACA,IAAI,CAACS,SAAS,EAAE;QACdD,KAAK,CAACK,KAAK,GAAG,yBAAyB;QACvCN,OAAO,CAACM,KAAK,GAAG,KAAK;QACrB;MACF;MAEA,IAAI;QACF,MAAMQ,QAAQ,GAAG,MAAMlB,UAAU,CAACmB,UAAU,CAACb,SAAS,CAAC;QACvDH,OAAO,CAACO,KAAK,GAAGQ,QAAQ,CAACE,IAAI;MAC/B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ;QACAC,OAAO,CAACjB,KAAK,CAAC,yBAAyB,EAAEgB,GAAG,CAAC;QAC7ChB,KAAK,CAACK,KAAK,GAAG,iDAAiD;MACjE,CAAC,SAAS;QACR;QACAN,OAAO,CAACM,KAAK,GAAG,KAAK;MACvB;IACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}